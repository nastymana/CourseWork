// CourseWork.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include "pch.h"


int main()

{
	ifstream f;//Объявляем поток чтения из файла
	ofstream f1;//Объявляем поток записи в файл
				//ModalProblem2("coordinate_tubeTEST2_50х50.txt");
				// test for Bocgstab+Yacobi
	vector<vector<double>>  revAtest, Atest = {
					{5.,	2,		0.5,	0.,		0.3,	0.},
					{0.1,	3.,		1.,		-0.5,	0.2,	0.},
					{0.,	0.3,	-3.,	0.,		-0.5,	0.},
					{0.1,	0.1,	-0.3,	4.,		-0.3,	0.},
					{-0.3,	0.3,	-1.,	0.5,	-4.5,	0.5},
					{0.3,	0.1,	-1.,	0.,		-0.5,	5.}
	};

	//init_model();
	char filename[10] = "nofile";

	vector<double> indataGrid = {
		/*1.,		0.0, 	1.0,	40.,		1.0,
		1.,		0.0, 	1.0,    40.,		1.0 };*/
		1.,	0.0, 	1.0,	20.,		1.,
		1.,	0.0, 	1.0,    20,		1. };

	vector<vector<double>>	indataParams = {

		{ 1., 0., 1., 0., 0. },	// 0
		{ 0.1, 0., 1., 0., 0. },	// 1
		{ 0.01, 0., 1., 0., 0. }, // 2
		{ 0.001, 0., 1., 0., 0. },	// 3
		{ 0.00001, 0., 1., 0., 0. }, // 4
		{ 0.0000001, 0., 1., 0., 0. }, // 5
		{ 0.00000000001, 0., 1., 0., 0. },  // 6
		{ 0.00000000000001, 0., 1., 0., 0. },  // 7
		{ 0.000000000000000001, 0., 1., 0., 0. },  // 8
		{ 0.000000000000001, 0., 1000., 0., 0. },  // 9
		//{ 1, 0., 0., 0., 0. }, // 10
		//{ 0, 0., 1., 0., 0. }, // 11
		//{ 10, 0., 0., 0., 0. }, // 12
		//{ 0.00001, 0., 0., 0., 0. }, // 13
		//{ 0.9, 0., 0., 0., 0. }, // 14
		//{ 0.8, 0., 0., 0., 0. }, // 15
		//{ 0.7, 0., 0., 0., 0. }, // 16
		//{ 0.6, 0., 0., 0., 0. }, // 17
		//{ 0.5, 0., 0., 0., 0. }, // 18
		//{ 0.4, 0., 0., 0., 0. }, // 19
		//{ 0.3, 0., 0., 0., 0. }, // 20
		//{ 0.2, 0., 0., 0., 0. }, // 21

		//{ 1., 0., 1., 2., 0. },	// 0
		//{ 0.1, 0., 1., 2., 0. },	// 1
		//{ 0.01, 0., 1., 2., 0. }, // 2
		//{ 0.001, 0., 1., 2., 0. },	// 3
		//{ 0.00001, 0., 1., 2., 0. }, // 4
		//{ 0.0000001, 0., 1., 2., 0. }, // 5
		//{ 0.00000000001, 0., 1., 2., 0. },  // 6
		//{ 0.00000000000001, 0., 1., 2., 0. },  // 7
		//{ 0.000000000000000001, 0., 1., 2., 0. },  // 8
		//{ 0.000000000000001, 0., 1000., 0., 0. },  // 9
		//{ 1, 0., 0., 0., 0. }, // 10
		//{ 0, 0., 1., 0., 0. }, // 11
		//{ 10, 0., 0., 0., 0. }, // 12
		//{ 0.00001, 0., 0., 0., 0. }, // 13

		//{ 1., 0., 2., 1., 0. },	// 0
		//{ 0.1, 0., 2., 1., 0. },	// 1
		//{ 0.01, 0., 2., 1., 0. }, // 2
		//{ 0.001, 0., 2., 1., 0. },	// 3
		//{ 0.00001, 0., 2., 1., 0. }, // 4
		//{ 0.0000001, 0., 2., 1., 0. }, // 5
		//{ 0.00000000001, 0., 2., 1., 0. },  // 6
		//{ 0.00000000000001, 0., 2., 1., 0. },  // 7
		//{ 0.000000000000000001, 0., 2., 1., 0. },  // 8
		//{ 0.000000000000001, 0., 1000., 0., 0. },  // 9
		//{ 1, 0., 0., 0., 0. }, // 10
		//{ 0, 0., 1., 0., 0. }, // 11
		//{ 10, 0., 0., 0., 0. }, // 12
		//{ 0.00001, 0., 0., 0., 0. }, // 13*/

	};
	vector<double> Rp1TimeParams = { 0., 0.01, 10 },
		RP1indataGrid = {
	1.,		0.0, 	0.10,	20.,		1.0,
	1.,		0.0, 	0.010,   3.,		1.0 };
	vector<vector<double>>	RP1indataParams = {

		{ 1., 0., 1., 0., 0. },	// 0
		{ 0.1, 0., 1., 0., 0. }, //1
		{ 0.01, 0., 1., 0., 0. }, // 2
		{ 0.00000001, 0., 1., 0., 0. }, // 8
		{ 0.000000001, 0., 1., 0., 0. }, // 9
		{ 0.0000000001, 0., 1., 0., 0. },// 10
	{ 10., 0., 1., 0., 0. },
	{ 100., 0., 1., 0., 0. },
	{ 0.00000001, 0., 0.01, 0., 0. }, }; // 8};	// 11

	for (size_t i = 0; i < RP1indataParams.size() - 8; i++)
	{
		//createClassicSolutionforCG_RP1(RP1indataGrid[3] * (RP1indataGrid[8]) + i, RP1indataGrid, RP1indataParams[i], Rp1TimeParams);
	}

	for (size_t i = 0; i < indataParams.size(); i++) {
		createClassicSolutionforCG_MP4(indataGrid[3] * (indataGrid[8]) + i, indataGrid, indataParams[i]);

	}
	return 0;
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
